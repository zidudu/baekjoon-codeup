#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

//번호 붙임
//N명의 시식단은 평가 소스 하나를 적음
// 동일한 숫자의 갯수가 많으면 그 숫자가 해당됨.
//같은 수가 여러번 나올때 카운팅 한 것을 저장해놓고 max 
//int max = 0;
//int current = arr;
//int count = 1;
//for (int i = 1; i < N; i++) {
//	if (arr[i] == arr) {
//		count += 1;
//		if(max < )
//	}
//}

int solution(int arr[], int arr_len, int N) { //N=15, arr_len = 15

	int frequency[101] = { 0 }; //방을 101개를 만들었다 왜 이렇게까지 많이 만들었을까?
	//물론 main의 list 배열 개수가 몇개인지 모르니까 크게 잡아두는 것일 거다.
	// 그렇지만 이 문제에서 frequency라는 배열을 만들어 두고 0으로 초기화 해두는 이유는 뭘까 ? 
	// 0이란 값은 false이고 배열에 0값이 다 있다는 것을 의미한다. 
	// 여기서 해야할껀 숫자가 제일 크고
	//
	for (int i = 0; i < N; i++) {
		frequency[arr[i]] += 1;  // 투표한 소스번호들의 값을 frequency의 인덱스 번호로 해서 중복되는 인덱스 번호들은 카운팅될것이다.
								// 배열 두개를 만들어두고 frequency 배열로 여러개 득표받은 것들은 카운팅이 됨.
	}

	int best = 0; //젤 많이 득표 받은 수
	int num = 0; // 많이 받은 그 숫자

	for (int i = 0; i < N; i++) {
		if (best <= frequency[i]) {  //소스 많이 받은 표를 선발
			best = frequency[i]; //최고 득표 수를 바꿈 
			if (num < i) { //num 값이 i의 값보다 클때
				 num = i; // num을 arr[i]로 바꿈
			}
		}
	}

	return num;
}

int main() {

	int arr1[] = { 1,2,3,4,4,5,6,7,7,8,9,9,9,9,10 }; //시식가 평가표
	int N1 = 15; // 시식단
	int arr1_len = 15; //배열 개수
	int ret1 = solution(arr1, arr1_len, N1);
	// [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
	printf("solution 함수의 반환 값은 %d입니다.\n", ret1);

	int arr2[] = { 1,1,4,4,8,8,8,8,9,9,9,9,1,4,4,4,5,3,2,2,1,4,8,7 };
	int N2 = 15;
	int arr2_len = 24;
	int ret2 = solution(arr2, arr2_len, N2);
	// [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
	printf("solution 함수의 반환 값은 %d입니다.\n", ret2);

	int arr3[] = { 3,3,3,3,3,5,5,5,5,5,9,9,9,9,9,11,11,11,11,11 };
	int N3 = 20;
	int arr3_len = 20;
	int ret3 = solution(arr3, arr3_len, N3);
	// [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
	printf("solution 함수의 반환 값은 %d입니다.\n", ret3);

}
