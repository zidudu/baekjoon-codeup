#include <stdio.h>
#include <stdlib.h>

const int RED = 1;
const int BLUE = 2;
const int GRAY = 3;

int solution(int N, int M, int** area, int area_row_len, int area_col_len, int C) {
	int answer = 0;

	//N*N 크기의 격자 생성
	int** paper = (int**)malloc(sizeof(int*) * N);
	for (int i = 0; i < N; i++) {
		paper[i] = (int*)malloc(sizeof(int) * N);
	}
	//초기화
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			paper[i][j] = 0;
		}
	}

	for (int i = 0; i < M; i++) {
		//열을 가리킴. 즉 영역의 정보값 배열의 주소 가져감
		int* target = area[i];

		// 정보값 초기화
		int from_r = target[0];
		int from_c = target[1];
		int to_r = target[2];
		int to_c = target[3];
		int color = target[4];

		//색칠
		for (int r = from_r; r <= to_r; r++) {
			for (int c = from_c; c <= to_c; c++) {
				//해당 위치가 흰색이라면 color로 색칠함
				if (paper[r][c] == 0) {
					paper[r][c] = color;
				}
				//해당 위치가 흰색이 아니고, 다른 색상이 들어있으면 GRAY로 바꿈
				else if (paper[r][c] != color) { //오류발견. color는 해당 영역의 정보로 초기화가 되기 때문에 
												//그리고 같은 색의 영역이 겹치는 경우는 회색으로 칠하지 않아서
												//그래서 ==을 !=로 바꿔줘야 함
					paper[r][c] = GRAY;
				}
			}
		}
	}

	//원하는 색상의 칸 수를 구하기
	for (int r = 0; r < N; r++) {
		for (int c = 0; c < N; c++) {
			if (C == paper[r][c]) { //C는 3임. 즉 회색의 칸 수 구함.
				answer += 1;
			}
		}
	}

	return answer;
}

// 아래는 테스트케이스 출력을 해보기 위한 main 함수입니다. 아래에는 잘못된 부분이 없으니 위의 코드만 수정하세요.

int main() {
	int N1 = 10; //색칠 영역 칸
	int M1 = 2; //빨파
	int area1_row_len = 2;
	int area1_col_len = 5;
	//색갈 영역과 왼쪽위,오른쪽아래 인덱스 , 칠할 색상 저장하는 2차원 배열 생성
	int** area1 = (int**)malloc(sizeof(int*) * area1_row_len);
	for (int i = 0; i < area1_row_len; i++)
		area1[i] = (int*)malloc(sizeof(int) * area1_col_len);

	//값 초기화
	area1[0][0] = 1;
	area1[0][1] = 1;
	area1[0][2] = 5;
	area1[0][3] = 4;
	area1[0][4] = 1;
	area1[1][0] = 2;
	area1[1][1] = 3;
	area1[1][2] = 6;
	area1[1][3] = 6;
	area1[1][4] = 2;
	//area = [[1,1,5,4,1],[2,3,6,6,2]] 
	int C1 = 3; //색 개수 빨 파 회
	int ret1 = solution(N1, M1, area1, area1_row_len, area1_col_len, C1);
	// [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
	printf("solution 함수의 반환 값은 %d입니다.\n", ret1);

	int N2 = 10;
	int M2 = 2;
	int area2_row_len = 2;
	int area2_col_len = 5;
	int** area2 = (int**)malloc(sizeof(int*) * area2_row_len);
	for (int i = 0; i < area2_row_len; i++)
		area2[i] = (int*)malloc(sizeof(int) * area2_col_len);

	area2[0][0] = 1;
	area2[0][1] = 1;
	area2[0][2] = 5;
	area2[0][3] = 4;
	area2[0][4] = 1;
	area2[1][0] = 2;
	area2[1][1] = 3;
	area2[1][2] = 6;
	area2[1][3] = 6;
	area2[1][4] = 1;
	int C2 = 3;
	int ret2 = solution(N2, M2, area2, area2_row_len, area2_col_len, C2);
	// [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
	printf("solution 함수의 반환 값은 %d입니다.\n", ret2);

}
//solution 함수의 반환 값은 8입니다.
//solution 함수의 반환 값은 0입니다.
