#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
/*
이 문제는 한 번 더 풀기! 조금 어렵지만 수학적으로 풀면 쉬움.
*/

int main() {
	//데이터 a b
	long long n;
	//제일 작은 k값
	long long min_k;
	//입력
	scanf("%lld", &n);

	long long i, k;
	for ( i = 1; i * i <= n; i++) { //i*i는 n보다 작아야함. 왜냐면 n보다 크게 되면 k는 음수가 됨.
		k = n - i * i; // (n-k) / i = i => n-k = i*i => -k = i*i-n => k = n-i*i
		// 0<k<n<=2^31 조건에서 k의 값은 0보다 커야하니 이 조건식이 참이면 k의 값이 나옴.
		//제일 작은 k값이 나올려면 i값이 제일 클때 k값이 제일 작음.
		min_k = k;
	}
	printf("%lld %lld\n", min_k, i -1);





	//정답지
	/*
	for (float i = 1; i * i <= n; i++) { //i*i는 n보다 작아야함. 왜냐면 n보다 크게 되면 k는 음수가 됨.
		float k = n - i * i; // (n-k) / i = i => n-k = i*i => -k = i*i-n => k = n-i*i
		// 0<k<n<=2^31 조건에서 k의 값은 0보다 커야하니 이 조건식이 참이면 k의 값이 나옴.
		if (k > 0) {

			printf("[참]결과: k=%.f, i=%.f (%.f - %.f^2 = %.f)\n", k, i, n, i, k);
		}
		else {
			printf("[거짓]결과: k=%.f, i=%.f (%.f - %.f^2 = %.f)\n", k, i, n, i, k);
		}
	}
	*/


	/*
	34
결과: k=33, i=1 (34 - 1^2 = 33)
결과: k=30, i=2 (34 - 2^2 = 30)
결과: k=25, i=3 (34 - 3^2 = 25)
결과: k=18, i=4 (34 - 4^2 = 18)
결과: k=9, i=5 (34 - 5^2 = 9)
	*/
	
	
	//	float sum;
//	//k를 증가시키면서 그 값에 제곱수의 i를 증가시켜 그 값이 나눠진다면 그 k 와 t를 나오게 함
////	k값은 제일 작게 나와야 함. 제곱수는 
//	for (k = 1; k < n; k++) {
//		for (float i = 1; i < n; i++) {
//			printf("결과 :k =%.f 이고 i = %.f 일때 =>",k,i);
//			if ((n - k) / i == i) {
//
//				printf("[참](%.f - %.f) / %.f = %.2f 이니 k=%.f, i=%.f\n", n, k, i, (n - k) / i,   k, i);
//				/*return 0;*/
//			}
//			else { printf("[거짓](%.f - %.f) / %.f = %.2f\n",n,k,i, (n - k) / i); }
//		}
//	}
//	float i =1;
//	for (float k = 1; k < n; k++) {
//		sum = sqrt(n - k);
//		if (sum == i++) printf("%f %f", k, i);
//
//	}
	//for (k = 1; k < n; k++) {
	//	for (float i = 1; i < n; i++) {
	//		printf("결과 :k =%.f 이고 i = %.f 일때 =>", k, i);
	//		if ((n - k) / i == i) {

	//			printf("[참](%.f - %.f) / %.f = %.2f 이니 k=%.f, i=%.f\n", n, k, i, (n - k) / i, k, i);
	//			/*return 0;*/
	//		}
	//		else { printf("[거짓](%.f - %.f) / %.f = %.2f\n", n, k, i, (n - k) / i); }
	//	}
	//}

	////수정 O(n)이 나오게 하기
	////힌트: 제곱수는 약수의 갯수가 홀수이다.
	//int count=0;
	//for (int i = 1; i <= n; i++) {
	//	if (n % i == 0) count++;
	//}

	//for (k = 1; k < n; k++) {
	//	for (float i = 1; i < n; i++) {

	//		if ((n - k) / i == i) {
	//			printf("%d %d", (int)k, (int)i);
	//			return 0;
	//		}
	//	}
	//}


	//int n, j, k, t, i;
	////배낀 예시
	//for (i = n; i >= 0; i--) //i값은 n부터  0까지 감소
	//{
	//	for (j = 1; j <= n / 2; j++) //j는 1부터 n/2까지 감소
	//	{
	//		if (j * j == n - i) // j와 j값을 곱한 것이 n-i일때(제곱인 수 일때)
	//		{
	//			k = i;
	//			t = j;
	//		}
	//	}
	//}
}
/*

n
이 입력되면
k
를 빼서 제곱수를 만들 수 있는
k
를 구하고,

그 제곱수에 루트를 씌운 수(제곱근)
t
를 구하여라.

이 때 k는 여러가지가 될 수 있는데 가장 작은 k를 출력한다.

입력
n
이 입력된다.(
0
<
k
<
n
<=
2
31
)

출력
k
와
t
를 출력한다. 이 때
k
는 여러가지가 될 수 있는데 가장 작은
k
를 출력한다.
*/
