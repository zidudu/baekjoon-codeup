#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int sosu(int x) {
	int count=0;
	for (int i = 1;  i <= x; i++) {
		//소수가 아닐때
		if (x % i == 0) {
			count++;
		}
	}
	//소수일때
	if (count == 2) return 1;
	//소수가 아닐때
	else { return 0; }
}


int main() {
	//수 n
	int n;
	//입력
	scanf("%d", &n);
	// n을 두 소수의 곱으로 나타낼 수 있으면 두 수를 오름차순으로 출력
	// n = (소수1) * (소수2) 가 되면 두 수를 출력하면 됨.
	// 1 <= n <= 10000000임. 즉 n은 1보다 크거나 같음
	// 소수 2 = n / 소수2 이고 소수1*소수2 ==n이 나와야함


	//소수는 값에 나누기 1을 하면 그 값이 나오고, 다른 값을 넣으면 그 값이 나오지 않음.
	//소수 a,b
	int a = 2, b = 2;
	//소수검사
	if (sosu(n) == 0) {printf("wrong number"); return 0;}

	for (int i = a; i * i <= n; i++) {
		b = n / i;
		//printf("a = %d, b = %d일때 => a * b = %d\n", i, b, i * b);
		if (i * b == n) {
			//printf("[참]%d %d\n", i, b);
			printf("%d %d\n", i, b);
			return 0;
		}
		else {

		}
	}



}
/*
두 소수의 곱을 암호로 사용하는 알고리즘은 큰 수의 소인수분해가 어렵기 때문에 안전하다고 알려져있다.

그렇지만, 만약 두 소수를 잊어버리면 어떻게 될까? 굉장히 난감할 것이다.

이에 대비해 어떤 수(n)가 입력되면 두 소수의 곱으로 나타낼 수 있으면 두 소수를 오름차순으로 출력하고,

그렇지 않으면 "wrong number"를 출력하는 프로그램을 작성하시오.

입력
어떤 수 n이 입력된다.(단, 1<=n<=10,000,000)

출력
n을 두 소수의 곱으로 나타낼 수 있으면 두 수를 오름차순으로 출력한다.

(단, 가능한 소수 중 가장 작은 소수와의 곱으로 나타낸다.)

하고, 그렇지 않으면 "wrong number"를 출력한다.

*/
